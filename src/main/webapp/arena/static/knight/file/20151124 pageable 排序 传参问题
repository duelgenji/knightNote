
Table 1. Request parameters evaluated for Pageable instances
page
Page you want to retrieve, 0 indexed and defaults to 0.
size
Size of the page you want to retrieve, defaults to 20.
sort
Properties that should be sorted by in the format property,property(,ASC|DESC). Default sort direction is ascending. Use multiple sort parameters if you want to switch directions, e.g. ?sort=firstname&sort=lastname,asc.


page 页数 size 每页大小

sort 排序   排序字段+(,desc|asc)
可以多个排序  用
1 get 方式  sort=aaa,asc&sorc=bbb,desc ;
2 表单形式   [{ name :"sort" ,value:"aaa,asc" } ,{ name :"sort" ,value:"bbb,desc" } ]



Sort 直接在repository的方法里 使用sort  ，多条件排序

  Sort sort = new Sort(Sort.Direction.DESC, "createdDate").and(new Sort(Sort.Direction.DESC, "id"));
  quizDetailRepository.findFirstByQuiz(q, sort);


  PageRequest pageable = new PageRequest(flag, 20, new Sort(Sort.Direction.DESC, "createdDate"));




Spring controller pageable sort 使用样例:

Pageable 包含 Sort

      代码来自:package com.wonders.xlab.pciuser.controller.v2.information;


    @RequestMapping(value = "getArticleList", method = RequestMethod.POST)
    @ApiOperation(value = "咨询列表")
    @ApiImplicitParams({@ApiImplicitParam(name = "size",dataType = "integer",paramType = "query")})
    public ControllerResult<ArticleListDto> getArticleList(@RequestParam long articleTypeId,
                                                           @SortDefault.SortDefaults({@SortDefault(sort="createdDate",direction = Sort.Direction.DESC)}) Sort sort,
                                                           Pageable pageable) {
        ArticleType articleType = articleTypeRepository.findOneById(articleTypeId);
        return new ControllerResult<ArticleListDto>()
                .setRet_values(new ArticleListDto(articleRepository.findByArticleTypeAndOnlineTrue(articleType,sort)));
                //.setRet_values(new ArticleListDto(articleRepository.findByArticleTypeAndOnlineTrue(articleType,pageable)));
    }